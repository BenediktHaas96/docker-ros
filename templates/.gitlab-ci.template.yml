workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"      # run child pipeline if triggered by parent pipeline
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"  # run merge request pipeline if triggered by merge request
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS  # don't run branch pipeline if open merge request exists
      when: never
    - if: $CI_COMMIT_BRANCH                             # run branch pipeline if triggered by commit
    - if: $CI_COMMIT_TAG                                # run tag pipeline with specific image tags if triggered by tag


variables:
  TARGET:                 run                     # Target stage of Dockerfile (comma-separated list) [dev|run]
  PLATFORM:               amd64                   # Target platform architecture (comma-separated list) [amd64|arm64|...]
  BASE_IMAGE:             ''                      # Base image name:tag (required)
  COMMAND:                ''                      # Launch command of run image (required if target=run)
  IMAGE_NAME:             ${CI_REGISTRY_IMAGE}    # Image name of run image
  IMAGE_TAG:              latest                  # Image tag of run image
  DEV_IMAGE_NAME:         ${IMAGE_NAME}           # Image name of dev image
  DEV_IMAGE_TAG:          ${IMAGE_TAG}-dev        # Image tag of dev image
  BUILD_CONTEXT:          .                       # Build context of Docker build process
  REGISTRY:               ${CI_REGISTRY}          # Docker registry to push images to
  REGISTRY_USERNAME:      ${CI_REGISTRY_USER}     # Docker registry username
  REGISTRY_PASSWORD:      ${CI_REGISTRY_PASSWORD} # Docker registry password
  ENABLE_INDUSTRIAL_CI:   'false'                 # Enable industrial_ci
  ENABLE_SINGLEARCH_PUSH: 'false'                 # Enable push of single arch images with [-amd64|-arm64] postfix

  RUN_IMAGE:              ${IMAGE_NAME}:${IMAGE_TAG}
  DEV_IMAGE:              ${DEV_IMAGE_NAME}:${DEV_IMAGE_TAG}

  IMAGE_DEV_CI:         ${DEV_IMAGE}_${CI_COMMIT_REF_SLUG}_ci
  IMAGE_RUN_CI:         ${RUN_IMAGE}_${CI_COMMIT_REF_SLUG}_ci
  IMAGE_DEV_CI_AMD64:   ${IMAGE_DEV_CI}-amd64
  IMAGE_DEV_CI_ARM64:   ${IMAGE_DEV_CI}-arm64
  IMAGE_RUN_CI_AMD64:   ${IMAGE_RUN_CI}-amd64
  IMAGE_RUN_CI_ARM64:   ${IMAGE_RUN_CI}-arm64
  IMAGE_DEV_LATEST:     ${DEV_IMAGE_NAME}:latest-dev
  IMAGE_RUN_LATEST:     ${IMAGE_NAME}:latest
  IMAGE_DEV_TARGET_TAG: ${DEV_IMAGE}-${CI_COMMIT_TAG}-dev
  IMAGE_RUN_TARGET_TAG: ${RUN_IMAGE}-${CI_COMMIT_TAG}
  IMAGE_DEV_TAG:        ${DEV_IMAGE_NAME}:${CI_COMMIT_TAG}-dev
  IMAGE_RUN_TAG:        ${IMAGE_NAME}:${CI_COMMIT_TAG}
  PUSH_AS_LATEST:       'false'
  # -----
  DOCKER_ROS_GIT_REF: main
  DISABLE_ARCH_AMD64: 'false'
  DISABLE_ARCH_ARM64: 'false'
  DISABLE_INDUSTRIAL_CI: 'false'
  DISABLE_PUSH: 'false'
  GIT_HTTPS_USER: gitlab-ci-token
  GIT_HTTPS_PASSWORD: $CI_JOB_TOKEN
  # -----
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: /certs
  DOCKER_BUILDKIT: 1


stages:
  - Build dev Images
  - Build run Images
  - Test ROS Industrial CI
  - Push Multi-Arch Images


default:
  image: docker:20.10.22-git
  services:
    - docker:20.10.22-dind
  tags:
    - privileged
    - amd64
  before_script:
    - apk add bash
    - cd ${BUILD_CONTEXT}
    - |-
      if [[ ! -d $docker/docker-ros ]]; then
        mkdir -p docker
        git config --global url.https://${GIT_HTTPS_USER}:${GIT_HTTPS_PASSWORD}@${CI_SERVER_HOST}:${CI_SERVER_PORT}.insteadOf ${CI_SERVER_URL}
        git clone --depth=1 https://gitlab.ika.rwth-aachen.de/fb-fi/ops/docker-ros.git docker/docker-ros
        cd docker/docker-ros
        git fetch origin ${DOCKER_ROS_GIT_REF}
        git checkout FETCH_HEAD
        cd -
      fi
    - docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${REGISTRY}
    - docker context create buildx-context
    - docker buildx create --use buildx-context
    - cd docker

.build:
  script:
    - ./docker-ros/build.sh
    - docker push ${IMAGE}

dev-amd64:
  stage: Build dev Images
  extends: .build
  rules:
    - if: $DISABLE_ARCH_AMD64 != 'true'
  variables:
    PLATFORM: linux/amd64
    BASE_IMAGE: ${BASE_IMAGE}
    TARGET: dev
    IMAGE: ${IMAGE_DEV_CI_AMD64}
    GIT_HTTPS_USER: ${GIT_HTTPS_USER}
    GIT_HTTPS_PASSWORD: ${GIT_HTTPS_PASSWORD}
    _ENABLE_IMAGE_PUSH: 'true'

dev-arm64:
  stage: Build dev Images
  extends: .build
  tags: [privileged, arm64]
  rules:
    - if: $DISABLE_ARCH_ARM64 != 'true'
  variables:
    PLATFORM: linux/arm64
    BASE_IMAGE: ${BASE_IMAGE}
    TARGET: dev
    IMAGE: ${IMAGE_DEV_CI_ARM64}
    GIT_HTTPS_USER: ${GIT_HTTPS_USER}
    GIT_HTTPS_PASSWORD: ${GIT_HTTPS_PASSWORD}
    _ENABLE_IMAGE_PUSH: 'true'

run-amd64:
  stage: Build run Images
  extends: .build
  needs: [dev-amd64]
  rules:
    - if: $DISABLE_ARCH_AMD64 != 'true'
  variables:
    PLATFORM: linux/amd64
    BASE_IMAGE: ${BASE_IMAGE}
    COMMAND: ${COMMAND}
    TARGET: run
    IMAGE: ${IMAGE_RUN_CI_AMD64}
    GIT_HTTPS_USER: ${GIT_HTTPS_USER}
    GIT_HTTPS_PASSWORD: ${GIT_HTTPS_PASSWORD}
    _ENABLE_IMAGE_PUSH: 'true'

run-arm64:
  stage: Build run Images
  extends: .build
  tags: [privileged, arm64]
  needs: [dev-arm64]
  rules:
    - if: $DISABLE_ARCH_ARM64 != 'true'
  variables:
    PLATFORM: linux/arm64
    BASE_IMAGE: ${BASE_IMAGE}
    COMMAND: ${COMMAND}
    TARGET: run
    IMAGE: ${IMAGE_RUN_CI_ARM64}
    GIT_HTTPS_USER: ${GIT_HTTPS_USER}
    GIT_HTTPS_PASSWORD: ${GIT_HTTPS_PASSWORD}
    _ENABLE_IMAGE_PUSH: 'true'


.test:
  variables:
    UPSTREAM_WORKSPACE: ${BUILD_CONTEXT}/.repos
    TARGET_WORKSPACE: ${BUILD_CONTEXT}
    ADDITIONAL_DEBS: git
    AFTER_INIT_EMBED: git config --global url.https://${GIT_HTTPS_USER}:${GIT_HTTPS_PASSWORD}@${CI_SERVER_HOST}:${CI_SERVER_PORT}.insteadOf ${CI_SERVER_URL}
    DOCKER_RUN_OPTS: -u root:root
  before_script:
    - docker login -u ${REGISTRY_USERNAME} -p ${REGISTRY_PASSWORD} ${REGISTRY}
    - apk add --update bash coreutils grep tar
    - git clone --branch master --depth 1 https://github.com/ros-industrial/industrial_ci.git .industrial_ci
    - test -f ${BUILD_CONTEXT}/.repos || echo "repositories:" > ${BUILD_CONTEXT}/.repos
  script: .industrial_ci/gitlab.sh

Test dev-amd64:
  stage: Test ROS Industrial CI
  extends: .test
  needs:
    - job: dev-amd64
      optional: true
  rules:
    - if: $DISABLE_INDUSTRIAL_CI != 'true' && $DISABLE_ARCH_AMD64 != 'true'
  variables:
    DOCKER_IMAGE: ${IMAGE_DEV_CI_AMD64}

Test dev-arm64:
  stage: Test ROS Industrial CI
  extends: .test
  tags: [privileged, arm64]
  needs:
    - job: dev-arm64
      optional: true
  rules:
      - if: $DISABLE_INDUSTRIAL_CI != 'true' && $DISABLE_ARCH_ARM64 != 'true'
  variables:
    DOCKER_IMAGE: ${IMAGE_DEV_CI_ARM64}


.push:
  needs:
    - job: dev-amd64
      optional: true
    - job: dev-arm64
      optional: true
    - job: run-amd64
      optional: true
    - job: run-arm64
      optional: true
    - job: Test dev-amd64
      optional: true
    - job: Test dev-arm64
      optional: true
  rules:
    - if: $DISABLE_PUSH == 'true' || $DISABLE_ARCH_AMD64 == 'true' && $DISABLE_ARCH_ARM64 == 'true'
      when: never
  script:
    - if [ $DISABLE_ARCH_AMD64 != "true" ] && [ $DISABLE_ARCH_ARM64 != "true" ]; then docker manifest create ${IMG_DEV} --amend ${IMAGE_DEV_CI_AMD64} --amend ${IMAGE_DEV_CI_ARM64} && docker manifest create ${IMG_RUN} --amend ${IMAGE_RUN_CI_AMD64} --amend ${IMAGE_RUN_CI_ARM64}; fi
    - if [ $DISABLE_ARCH_AMD64 != "true" ] && [ $DISABLE_ARCH_ARM64 = "true" ]; then docker manifest create ${IMG_DEV} --amend ${IMAGE_DEV_CI_AMD64} && docker manifest create ${IMG_RUN} --amend ${IMAGE_RUN_CI_AMD64}; fi
    - if [ $DISABLE_ARCH_AMD64 = "true" ] && [ $DISABLE_ARCH_ARM64 != "true" ]; then docker manifest create ${IMG_DEV} --amend ${IMAGE_DEV_CI_ARM64} && docker manifest create ${IMG_RUN} --amend ${IMAGE_RUN_CI_ARM64}; fi
    - docker manifest push ${IMG_DEV}
    - docker manifest push ${IMG_RUN}

Push CI:
  stage: Push Multi-Arch Images
  extends: .push
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  variables:
    IMG_DEV: ${IMAGE_DEV_CI}
    IMG_RUN: ${IMAGE_RUN_CI}

Push:
  stage: Push Multi-Arch Images
  extends: .push
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    IMG_DEV: ${IMAGE_DEV_TARGET}
    IMG_RUN: ${IMAGE_RUN_TARGET}

Push latest:
  stage: Push Multi-Arch Images
  extends: .push
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $PUSH_AS_LATEST == 'true'
  variables:
    IMG_DEV: ${IMAGE_DEV_LATEST}
    IMG_RUN: ${IMAGE_RUN_LATEST}

Push target tag:
  stage: Push Multi-Arch Images
  extends: .push
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_TAG
  variables:
    IMG_DEV: ${IMAGE_DEV_TARGET_TAG}
    IMG_RUN: ${IMAGE_RUN_TARGET_TAG}

Push tag:
  stage: Push Multi-Arch Images
  extends: .push
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_TAG && $PUSH_AS_LATEST == 'true'
  variables:
    IMG_DEV: ${IMAGE_DEV_TAG}
    IMG_RUN: ${IMAGE_RUN_TAG}