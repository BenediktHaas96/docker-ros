stages:
  - Trigger
  - Watch


default:
  image: badouralix/curl-jq


.trigger:
  stage: Trigger
  script:
    - mkdir artifacts
    - curl --silent --fail --request POST --form token=$DOCKER_ROS_CI_TRIGGER_TOKEN --form ref=$DOCKER_ROS_CI_GIT_REF --form "variables[DOCKER_ROS_GIT_REF]=$CI_COMMIT_SHA" "https://gitlab.ika.rwth-aachen.de/api/v4/projects/1886/trigger/pipeline" | jq -r .id > artifacts/id
  artifacts:
    paths: [artifacts]
    expire_in: 1h

Trigger ROS1:
  extends: .trigger
  variables:
    DOCKER_ROS_CI_GIT_REF: main

Trigger ROS2:
  extends: .trigger
  variables:
    DOCKER_ROS_CI_GIT_REF: ros2
  

.watch:
  stage: Watch
  script:
    - PIPELINE_ID=$(cat artifacts/id)
    - |-
      while true; do
        sleep 30
        PIPELINE_STATUS=$(curl --silent --header "PRIVATE-TOKEN: $DOCKER_ROS_CI_READ_PIPELINE_TOKEN" "https://gitlab.ika.rwth-aachen.de/api/v4/projects/1886/pipelines/$PIPELINE_ID" | jq -r .status)
        echo "Pipeline status: $PIPELINE_STATUS (https://gitlab.ika.rwth-aachen.de/fb-fi/ops/docker-ros-ci/-/pipelines/$PIPELINE_ID)"
        if [[ $PIPELINE_STATUS == "success" ]]; then
          break
        elif [[ $PIPELINE_STATUS == "failed" ]]; then
          exit 1
        elif [[ $PIPELINE_STATUS == "canceled" ]]; then
          exit 1
        fi
      done

Watch ROS1:
  extends: .watch
  needs: [Trigger ROS1]

Watch ROS2:
  extends: .watch
  needs: [Trigger ROS2]
