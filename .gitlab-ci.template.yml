workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"      # run child pipeline if triggered by parent pipeline
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"  # run merge request pipeline if triggered by merge request
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS  # don't run branch pipeline if open merge request exists
      when: never
    - if: $CI_COMMIT_BRANCH                             # run branch pipeline if triggered by commit
    - if: $CI_COMMIT_TAG                                # run tag pipeline with specific image tags if triggered by tag


variables:
  IMAGE_DEV_TARGET:     ${CI_REGISTRY_IMAGE}:latest-dev
  IMAGE_RUN_TARGET:     ${CI_REGISTRY_IMAGE}:latest
  IMAGE_DEV_CI:         ${IMAGE_DEV_TARGET}_${CI_COMMIT_REF_SLUG}_ci
  IMAGE_RUN_CI:         ${IMAGE_RUN_TARGET}_${CI_COMMIT_REF_SLUG}_ci
  IMAGE_DEV_CI_AMD64:   ${IMAGE_DEV_CI}-amd64
  IMAGE_DEV_CI_ARM64:   ${IMAGE_DEV_CI}-arm64
  IMAGE_RUN_CI_AMD64:   ${IMAGE_RUN_CI}-amd64
  IMAGE_RUN_CI_ARM64:   ${IMAGE_RUN_CI}-arm64
  IMAGE_DEV_LATEST:     ${CI_REGISTRY_IMAGE}:latest-dev
  IMAGE_RUN_LATEST:     ${CI_REGISTRY_IMAGE}:latest
  IMAGE_DEV_TARGET_TAG: ${IMAGE_DEV_TARGET}-${CI_COMMIT_TAG}-dev
  IMAGE_RUN_TARGET_TAG: ${IMAGE_RUN_TARGET}-${CI_COMMIT_TAG}
  IMAGE_DEV_TAG:        ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}-dev
  IMAGE_RUN_TAG:        ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  PUSH_AS_LATEST:       'false'
  # -----
  DOCKER_ROS_GIT_REF: main
  DOCKER_COMPOSE_DIR: docker
  ROS_WORKSPACE_DIR: .
  DISABLE_ARCH_AMD64: 'false'
  DISABLE_ARCH_ARM64: 'false'
  DISABLE_INDUSTRIAL_CI: 'false'
  GIT_HTTPS_USER: gitlab-ci-token
  GIT_HTTPS_PASSWORD: $CI_JOB_TOKEN
  # -----
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: /certs
  DOCKER_BUILDKIT: 1


stages:
  - Build dev Images
  - Build run Images
  - Test ROS Industrial CI
  - Push Multi-Arch Images


default:
  image: docker:20.10.22-git
  services:
    - docker:20.10.22-dind
  tags:
    - privileged
    - amd64
  before_script:
    - git clone --depth=1 $CI_REPOSITORY_URL $DOCKER_COMPOSE_DIR/$CI_PROJECT_NAME
    - cd $DOCKER_COMPOSE_DIR/$CI_PROJECT_NAME
    - git fetch origin $DOCKER_ROS_GIT_REF
    - git checkout $DOCKER_ROS_GIT_REF
    - cd -
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create buildx-context
    - docker buildx create --use buildx-context
    - cd $DOCKER_COMPOSE_DIR
    - 'sed -i "/\    image:/a\    platform: $PLATFORM" docker-compose.yaml'
    - 'sed -i "/\  context:/a\  cache_from: [$IMG_CACHE]\n\  cache_to: [type=inline]" docker-compose.yaml'


.build:
  script:
    - docker compose build ${TARGET}
    - docker tag ${IMG_TARGET} ${IMG}
    - docker push ${IMG}

dev-amd64:
  stage: Build dev Images
  rules:
    - if: $DISABLE_ARCH_AMD64 != 'true'
  script:
    - !reference [.build, script]
  variables:
    PLATFORM: linux/amd64
    TARGET: dev
    IMG_TARGET: ${IMAGE_DEV_TARGET}
    IMG_CACHE: ${IMAGE_DEV_CI_AMD64}
    IMG: ${IMAGE_DEV_CI_AMD64}

dev-arm64:
  stage: Build dev Images
  tags: [privileged, arm64]
  rules:
    - if: $DISABLE_ARCH_ARM64 != 'true'
  script:
    - !reference [.build, script]
  variables:
    PLATFORM: linux/arm64
    TARGET: dev
    IMG_TARGET: ${IMAGE_DEV_TARGET}
    IMG_CACHE: ${IMAGE_DEV_CI_ARM64}
    IMG: ${IMAGE_DEV_CI_ARM64}

run-amd64:
  stage: Build run Images
  needs: [dev-amd64]
  rules:
    - if: $DISABLE_ARCH_AMD64 != 'true'
  script:
    - !reference [.build, script]
  variables:
    PLATFORM: linux/amd64
    TARGET: run
    IMG_TARGET: ${IMAGE_RUN_TARGET}
    IMG_CACHE: ${IMAGE_DEV_CI_AMD64}
    IMG: ${IMAGE_RUN_CI_AMD64}

run-arm64:
  stage: Build run Images
  tags: [privileged, arm64]
  needs: [dev-arm64]
  rules:
    - if: $DISABLE_ARCH_ARM64 != 'true'
  script:
    - !reference [.build, script]
  variables:
    PLATFORM: linux/arm64
    TARGET: run
    IMG_TARGET: ${IMAGE_RUN_TARGET}
    IMG_CACHE: ${IMAGE_DEV_CI_ARM64}
    IMG: ${IMAGE_RUN_CI_ARM64}


Test dev-amd64:
  stage: Test ROS Industrial CI
  needs:
    - job: dev-amd64
      optional: true
  rules:
    - if: $DISABLE_INDUSTRIAL_CI != 'true'
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --update bash coreutils grep tar
    - git clone --branch master --depth 1 https://github.com/ros-industrial/industrial_ci.git .industrial_ci
    - test -f $ROS_WORKSPACE_DIR/.repos || echo "repositories:" > $ROS_WORKSPACE_DIR/.repos
  script: .industrial_ci/gitlab.sh
  variables:
    UPSTREAM_WORKSPACE: $ROS_WORKSPACE_DIR/.repos
    TARGET_WORKSPACE: $ROS_WORKSPACE_DIR
    ADDITIONAL_DEBS: git
    AFTER_INIT_EMBED: git config --global url.${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}.insteadOf ${CI_SERVER_URL}
    DOCKER_IMAGE: ${IMAGE_DEV_CI_AMD64}
    DOCKER_RUN_OPTS: -u root:root


.push:
  needs:
    - job: dev-amd64
      optional: true
    - job: dev-arm64
      optional: true
    - job: run-amd64
      optional: true
    - job: run-arm64
      optional: true
    - job: Test dev-amd64
      optional: true
  rules:
    - if: $DISABLE_ARCH_AMD64 == 'true' && $DISABLE_ARCH_ARM64 == 'true'
      when: never
  script:
    - if [ $DISABLE_ARCH_AMD64 != "true" ] && [ $DISABLE_ARCH_ARM64 != "true" ]; then docker manifest create ${IMG_DEV} --amend ${IMAGE_DEV_CI_AMD64} --amend ${IMAGE_DEV_CI_ARM64} && docker manifest create ${IMG_RUN} --amend ${IMAGE_RUN_CI_AMD64} --amend ${IMAGE_RUN_CI_ARM64}; fi
    - if [ $DISABLE_ARCH_AMD64 != "true" ] && [ $DISABLE_ARCH_ARM64 = "true" ]; then docker manifest create ${IMG_DEV} --amend ${IMAGE_DEV_CI_AMD64} && docker manifest create ${IMG_RUN} --amend ${IMAGE_RUN_CI_AMD64}; fi
    - if [ $DISABLE_ARCH_AMD64 = "true" ] && [ $DISABLE_ARCH_ARM64 != "true" ]; then docker manifest create ${IMG_DEV} --amend ${IMAGE_DEV_CI_ARM64} && docker manifest create ${IMG_RUN} --amend ${IMAGE_RUN_CI_ARM64}; fi
    - docker manifest push ${IMG_DEV}
    - docker manifest push ${IMG_RUN}

Push CI:
  stage: Push Multi-Arch Images
  needs:
    - !reference [.push, needs]
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  script:
    - !reference [.push, script]
  variables:
    IMG_DEV: ${IMAGE_DEV_CI}
    IMG_RUN: ${IMAGE_RUN_CI}

Push:
  stage: Push Multi-Arch Images
  needs:
    - !reference [.push, needs]
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - !reference [.push, script]
  variables:
    IMG_DEV: ${IMAGE_DEV_TARGET}
    IMG_RUN: ${IMAGE_RUN_TARGET}

Push latest:
  stage: Push Multi-Arch Images
  needs:
    - !reference [.push, needs]
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $PUSH_AS_LATEST == 'true'
  script:
    - !reference [.push, script]
  variables:
    IMG_DEV: ${IMAGE_DEV_LATEST}
    IMG_RUN: ${IMAGE_RUN_LATEST}

Push target tag:
  stage: Push Multi-Arch Images
  needs:
    - !reference [.push, needs]
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_TAG
  script:
    - !reference [.push, script]
  variables:
    IMG_DEV: ${IMAGE_DEV_TARGET_TAG}
    IMG_RUN: ${IMAGE_RUN_TARGET_TAG}

Push tag:
  stage: Push Multi-Arch Images
  needs:
    - !reference [.push, needs]
  rules:
    - !reference [.push, rules]
    - if: $CI_COMMIT_TAG && $PUSH_AS_LATEST == 'true'
  script:
    - !reference [.push, script]
  variables:
    IMG_DEV: ${IMAGE_DEV_TAG}
    IMG_RUN: ${IMAGE_RUN_TAG}
